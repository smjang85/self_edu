# AWS Config 설정
$aws configure
***AA
***BB
ca-central-1
json

#AWS Profile 설정 확인
$cat ~/.aws/config
$cat ~/.aws/credentials

#eksctl 다운로드
$curl --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

#클러스터생성
$eksctl create cluster \
--name user20 \
--version 1.17 \
--nodegroup-name standard-workers \
--node-type t3.medium \
--nodes 4 \
--nodes-min 1 \
--nodes-max 4
$kubectl get nodes

#클러스터 사용 설정
kubectl config use-context arn:aws:eks:ca-central-1:879772956301:cluster/user20
aws eks update-kubeconfig --name user20

$aws eks --region ca-central-1 update-kubeconfig --name user20
$kubectl config current-context
$kubectl get all

## Helm설치
$curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
$chmod 700 get_helm.sh
$./get_helm.sh
$helm repo add incubator https://charts.helm.sh/incubator
$helm repo update

## kafka설치
# Kafka를 배포하기 위한 namespace
$kubectl create ns kafka
# 생성된 namespace 목록을 가져온다.
$kubectl get ns
$helm install my-kafka --namespace kafka incubator/kafka


#네임스페이스 생성
# Spring Cloud 프로젝트 배포를 위한 namespace 
$kubectl create ns user20


#기본 namespace설정 및 서비스확인
$kubectl config set-context $(kubectl config current-context) --namespace=user20
$kubectl get all

# docker 배포 (윈도우에서 함)
$cd C:\Users\smjan\Documents\workspace\storagerent\message
$mvn clean package
$aws ecr create-repository --repository-name user20-message --region ca-central-1 #한번만
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-message:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-message:latest
$kubectl apply -f ./kubernetes

$cd C:\Users\smjan\Documents\workspace\storagerent\payment
$mvn clean package
$aws ecr create-repository --repository-name user20-payment --region ca-central-1
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-payment:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-payment:latest
$kubectl apply -f ./kubernetes

$cd C:\Users\smjan\Documents\workspace\storagerent\reservation
$mvn clean package
$aws ecr create-repository --repository-name user20-reservation --region ca-central-1
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-reservation:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-reservation:latest
$kubectl apply -f ./kubernetes

$cd C:\Users\smjan\Documents\workspace\storagerent\storage
$mvn clean package
$aws ecr create-repository --repository-name user20-storage --region ca-central-1
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-storage:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-storage:latest
$kubectl apply -f ./kubernetes

$cd C:\Users\smjan\Documents\workspace\storagerent\viewpage
$mvn clean package
$aws ecr create-repository --repository-name user20-viewpage --region ca-central-1
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-viewpage:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-viewpage:latest
$kubectl apply -f ./kubernetes

$cd C:\Users\smjan\Documents\workspace\storagerent\log
$mvn clean package
$aws ecr create-repository --repository-name user20-log --region ca-central-1
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-log:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-log:latest
$kubectl apply -f ./kubernetes

# 게이트웨이 설정
$cd C:\Users\smjan\Documents\workspace\storagerent\gateway
$mvn clean package
$aws ecr create-repository --repository-name user20-gateway --region ca-central-1
$docker build -t 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-gateway:latest .
$docker push 879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-gateway:latest
$kubectl create deploy gateway --image=879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-gateway:latest
$kubectl expose deploy gateway --type="LoadBalancer" --port=8080

#메트릭스 서버 설치

#도커 버전 변경시 적용
$kubectl set image deploy log log=879772956301.dkr.ecr.ca-central-1.amazonaws.com/user20-log:latest

#서비스 배포가 잘 안되면 삭제 후 재배포
$kubectl delete svc log
$kubectl delete pod log-7fbcfd7d79-gjgtp
$kubectl delete deployment log

## HPA
$kubectl apply -f  https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.7/components.yaml
$kubectl autoscale deployment log --cpu-percent=50 --min=1 --max=10

#부하 발생
kubectl run siege --image=apexacme/siege-nginx 
kubectl exec -it pod/siege -- /bin/sh
siege -c200 -t60S -r10 -v --content-type "application/json" http://a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/checkLogService
siege -c30 -t30S -v --content-type "application/json" http://a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/checkLogService

# 기타
http a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/checkLogService
http a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/actuator/health
http post a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/actuator/health/down

# pod 로그확인
$kubectl get pods
$kubectl logs -f $pod이름$

# 업무 수행 확인

http a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/storageviews

http POST a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/storages description="BigStorage" price=200000 storageStatus="available"


http POST a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations storageId=1 price=200000 reservationStatus="reqReserve"


http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/storages/1


http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/2

http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/payments/2

http PATCH a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/2 storageId=1 price=200000 reservationStatus="reqCancel"

http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/storages/1

http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/2

http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/payments/2

http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/reservations/phone_no

http GET a7a2f9b53bfe24277b20ddd5577fd870-786052247.ca-central-1.elb.amazonaws.com:8080/logs







